// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @default(autoincrement())
  email      String  @unique
  firstName  String?
  lastName   String?
  password   String
  resetToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  avatar        String?
  birth         DateTime?
  sex           String?
  subscriptions SubscriptionUser[]

  salons   Salon[]    @relation("userToSalons")
  Image    Image[]    @relation("userImages")
  
  roles RoleUser[]

  @@map("users")
}

// TABLES ABONNEMENT
model SubscriptionUser {
  id                 Int       @id @default(autoincrement())
  since_month        String?
  billing_start_date DateTime?
  billing_end_date   DateTime?
  status             String
  billing_next_date  DateTime?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  subscriptionId Int
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
}

model Subscription {
  id             Int                         @id @default(autoincrement())
  name           String                      @unique
  slug           String                      @unique
  price          Float
  users          SubscriptionUser[]
  authorizations AuthorizationSubscription[] // Relation many-to-many
}

model Salon {
  id      Int     @id @default(autoincrement())
  name    String
  logo    String?
  street  String
  zipcode String
  country String
  userId  Int
  user    User    @relation("userToSalons", fields: [userId], references: [id])
}

model Image {
  id     Int     @id @default(autoincrement())
  url    String
  name   String?
  userId Int
  user   User    @relation("userImages", fields: [userId], references: [id])
}

// TABLES PERMISSIONS
model Role {
  id             Int                 @id @default(autoincrement())
  name           String              @unique
  slug           String              @unique
  authorizations AuthorizationRole[]

  users    RoleUser[]
}

model RoleUser {
  userId Int
  // roleId Int

  roleSlug String

  user User @relation(fields: [userId], references: [id])
  // role Role @relation(fields: [roleId], references: [id])
  role Role @relation(fields: [roleSlug], references: [slug])

  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([userId, roleSlug])
}

model Authorization {
  id            Int                         @id @default(autoincrement())
  name          String                      @unique
  slug          String                      @unique
  roles         AuthorizationRole[]
  subscriptions AuthorizationSubscription[] // Relation many-to-many
}

// TABLES PIVOTS

model AuthorizationRole {
  id              Int @id @default(autoincrement())
  roleId          Int
  authorizationId Int

  role          Role          @relation(fields: [roleId], references: [id])
  authorization Authorization @relation(fields: [authorizationId], references: [id])

  @@unique([roleId, authorizationId])
}

model AuthorizationSubscription {
  id              Int @id @default(autoincrement())
  subscriptionId  Int
  authorizationId Int

  subscription  Subscription  @relation(fields: [subscriptionId], references: [id])
  authorization Authorization @relation(fields: [authorizationId], references: [id])

  @@unique([subscriptionId, authorizationId])
}

//  Autre tables

model Contact {
  id      Int     @id @default(autoincrement())
  name    String?
  email   String?
  phone   String?
  purpose String?
  message String?
}
